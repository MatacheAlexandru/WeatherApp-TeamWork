{"mappings":"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","sources":["src/apiOpenWeather.js","src/apiPixabay.js","src/partials/backgroundImage.js","src/quotesApi.js","src/partials/additionalWeather.js","src/partials/weathercard.js","src/partials/searchBar.js","src/index.js"],"sourcesContent":["const API_KEY = 'c28b86768a874c70b1ecd1343e8f0f24';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst GEO_BASE_URL = 'https://api.openweathermap.org/geo/1.0';\nconst MAP_BASE_URL = 'https://tile.openweathermap.org/map';\n\nasync function fetchFromAPI(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTPS error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Fetch API Error:', error);\n    throw error;\n  }\n}\n\n// Obține datele meteo actuale pentru un oraș specificat\nasync function getWeatherByCityName(city) {\n  try {\n    const url = `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error getting weather by city name \"${city}\":`, error);\n    throw error;\n  }\n}\n\n// Obține datele meteo actuale pentru coordonate geografice specificate\nasync function getWeatherByCoordinates(lat, lon) {\n  try {\n    const url = `${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather by coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\nasync function getWeatherForecastByCityName(city) {\n  try {\n    const url = `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather forecast by city name \"${city}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\nasync function getWeatherForecastByCoordinates(lat, lon) {\n  try {\n    const url = `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather forecast by coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține indicele UV pentru coordonate geografice specificate\nasync function getUVIndex(lat, lon) {\n  try {\n    const url = `${BASE_URL}/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting UV index for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține datele despre poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollution(lat, lon) {\n  try {\n    const url = `${BASE_URL}/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution data for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține coordonatele geografice pentru un oraș specificat\nasync function getGeocoding(city) {\n  try {\n    const url = `${GEO_BASE_URL}/direct?q=${city}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error getting geocoding for city \"${city}\":`, error);\n    throw error;\n  }\n}\n\n// Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\nasync function getReverseGeocoding(lat, lon) {\n  try {\n    const url = `${GEO_BASE_URL}/reverse?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting reverse geocoding for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\nasync function getWeatherMap(layer, zoom, x, y) {\n  try {\n    const url = `${MAP_BASE_URL}/${layer}/${zoom}/${x}/${y}.png?appid=${API_KEY}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTPS error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.error(\n      `Error getting weather map (layer: ${layer}, zoom: ${zoom}, x: ${x}, y: ${y}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollutionForecast(lat, lon) {\n  try {\n    const url = `${BASE_URL}/air_pollution/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution forecast for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\nasync function getAirPollutionHistory(lat, lon, start, end) {\n  try {\n    const url = `${BASE_URL}/air_pollution/history?lat=${lat}&lon=${lon}&start=${start}&end=${end}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution history for coordinates (lat: ${lat}, lon: ${lon}, start: ${start}, end: ${end}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține URL-ul iconiței meteo\nfunction getWeatherIconUrl(iconCode) {\n  return `https://openweathermap.org/img/wn/${iconCode}.png`;\n}\n\nexport {\n  getWeatherByCityName, // Obține datele meteo actuale pentru un oraș specificat\n  getWeatherByCoordinates, // Obține datele meteo actuale pentru coordonate geografice specificate\n  getWeatherForecastByCityName, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\n  getWeatherForecastByCoordinates, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\n  getUVIndex, // Obține indicele UV pentru coordonate geografice specificate\n  getAirPollution, // Obține datele despre poluarea aerului pentru coordonate geografice specificate\n  getGeocoding, // Obține coordonatele geografice pentru un oraș specificat\n  getReverseGeocoding, // Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\n  getWeatherMap, // Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\n  getAirPollutionForecast, // Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\n  getAirPollutionHistory, // Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\n  getWeatherIconUrl, // Obține URL-ul iconiței meteo\n};\n","const API_KEY = '24587351-f51ecbfdd1a1ed72c58205b43';\nconst BASE_URL = 'https://pixabay.com/api';\n\n// Funcție generală pentru cereri către Pixabay API\nasync function fetchFromAPI(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Network response was not ok. Status: ${response.status}`\n      );\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Fetch API Error:', error);\n    throw error;\n  }\n}\n\n// Obține imagini după un cuvânt cheie\nasync function searchImages(query, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&q=${query}&image_type=photo&page=${page}&per_page=${perPage}`;\n    console.log('Fetching images from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error searching images with query \"${query}\":`, error);\n    throw error;\n  }\n}\n\n// Obține videouri după un cuvânt cheie\nasync function searchVideos(query, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&q=${query}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching videos from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error searching videos with query \"${query}\":`, error);\n    throw error;\n  }\n}\n\n// Obține detalii despre o imagine după ID\nasync function getImageDetails(imageId) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&id=${imageId}`;\n    console.log('Fetching image details from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching image details with ID \"${imageId}\":`, error);\n    throw error;\n  }\n}\n\n// Obține imagini populare\nasync function getPopularImages(\n  category = '',\n  editorsChoice = false,\n  page = 1,\n  perPage = 20\n) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&order=popular&category=${category}&editors_choice=${editorsChoice}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching popular images from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error fetching popular images with category \"${category}\" and editorsChoice \"${editorsChoice}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține videouri populare\nasync function getPopularVideos(\n  category = '',\n  editorsChoice = false,\n  page = 1,\n  perPage = 20\n) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&order=popular&category=${category}&editors_choice=${editorsChoice}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching popular videos from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error fetching popular videos with category \"${category}\" and editorsChoice \"${editorsChoice}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține imagini aleatorii\nasync function getRandomImages(query, page = 1, perPage = 3) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&q=${query}&image_type=photo&per_page=${perPage}&page=${page}`;\n    console.log('Fetching image from URL:', url); // Log pentru verificarea URL-ului\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching random images with query \"${query}\":`, error);\n    throw error;\n  }\n}\n\n// Obține videouri aleatorii\nasync function getRandomVideos(category = '', page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&order=latest&category=${category}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching random videos from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error fetching random videos with category \"${category}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține imagini după culoare\nasync function getImagesByColor(color, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&colors=${color}&image_type=photo&page=${page}&per_page=${perPage}`;\n    console.log('Fetching images by color from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching images by color \"${color}\":`, error);\n    throw error;\n  }\n}\n\n// Obține videouri după culoare (dacă este suportat)\nasync function getVideosByColor(color, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&colors=${color}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching videos by color from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching videos by color \"${color}\":`, error);\n    throw error;\n  }\n}\n\nexport {\n  searchImages, // Obține imagini după un cuvânt cheie\n  searchVideos, // Obține videouri după un cuvânt cheie\n  getImageDetails, // Obține detalii despre o imagine după ID\n  getPopularImages, // Obține imagini populare\n  getPopularVideos, // Obține videouri populare\n  getRandomImages, // Obține imagini aleatorii\n  getRandomVideos, // Obține videouri aleatorii\n  getImagesByColor, // Obține imagini după culoare\n  getVideosByColor, // Obține videouri după culoare (dacă este suportat)\n};\n","import { getRandomImages } from '../apiPixabay.js';\n\nexport async function setBackgroundForCity(city) {\n  try {\n    const imageData = await getRandomImages(city, 1, 3); // Cerem trei imagini pentru a evita erorile de validare\n    const backgroundElement = document.getElementById('background-image');\n    if (\n      imageData &&\n      imageData.hits &&\n      imageData.hits.length > 0 &&\n      backgroundElement\n    ) {\n      backgroundElement.style.backgroundImage = `url(${imageData.hits[0].webformatURL})`;\n      backgroundElement.style.backgroundSize = 'cover';\n      backgroundElement.style.backgroundPosition = 'center';\n      backgroundElement.style.height = '100vh';\n      backgroundElement.style.width = '100vw';\n      backgroundElement.style.position = 'fixed';\n      backgroundElement.style.zIndex = '-1';\n    } else {\n      console.error('No images found or background element not found.');\n    }\n  } catch (error) {\n    console.error('Error fetching image from Pixabay API:', error);\n  }\n}\n","// quotesApi.js\n\nconst cityAuthorMapping = {\n  'New York': {\n    author: 'Mark Twain',\n    quote: 'The secret of getting ahead is getting started.',\n  },\n  Paris: {\n    author: 'Victor Hugo',\n    quote: 'He who opens a school door, closes a prison.',\n  },\n  London: {\n    author: 'William Shakespeare',\n    quote: 'To be, or not to be, that is the question.',\n  },\n  Vienna: {\n    author: 'Sigmund Freud',\n    quote: 'Being entirely honest with oneself is a good exercise.',\n  },\n  Rome: {\n    author: 'Marcus Aurelius',\n    quote:\n      'The happiness of your life depends upon the quality of your thoughts.',\n  },\n  Tokyo: {\n    author: 'Haruki Murakami',\n    quote:\n      'And once the storm is over, you won’t remember how you made it through.',\n  },\n  Dublin: {\n    author: 'James Joyce',\n    quote:\n      'A man of genius makes no mistakes. His errors are volitional and are the portals of discovery.',\n  },\n  Moscow: {\n    author: 'Leo Tolstoy',\n    quote:\n      'Everyone thinks of changing the world, but no one thinks of changing himself.',\n  },\n  Berlin: {\n    author: 'Albert Einstein',\n    quote:\n      'Life is like riding a bicycle. To keep your balance, you must keep moving.',\n  },\n  Athens: {\n    author: 'Plato',\n    quote: 'The greatest wealth is to live content with little.',\n  },\n  Beijing: {\n    author: 'Confucius',\n    quote: 'It does not matter how slowly you go as long as you do not stop.',\n  },\n  Madrid: {\n    author: 'Miguel de Cervantes',\n    quote: 'The pen is the tongue of the mind.',\n  },\n  Cairo: {\n    author: 'Naguib Mahfouz',\n    quote:\n      'You can tell whether a man is clever by his answers. You can tell whether a man is wise by his questions.',\n  },\n  Lisbon: {\n    author: 'Fernando Pessoa',\n    quote: 'Literature is the most agreeable way of ignoring life.',\n  },\n  'Buenos Aires': {\n    author: 'Jorge Luis Borges',\n    quote: 'I have always imagined that Paradise will be a kind of library.',\n  },\n  'Mexico City': {\n    author: 'Octavio Paz',\n    quote: 'Solitude is the profoundest fact of the human condition.',\n  },\n  Istanbul: {\n    author: 'Orhan Pamuk',\n    quote: 'Real museums are places where Time is transformed into Space.',\n  },\n  Sydney: {\n    author: 'Patrick White',\n    quote:\n      \"Life is always going to be stranger than fiction, because fiction has to be convincing, and life doesn't.\",\n  },\n  Johannesburg: {\n    author: 'Nelson Mandela',\n    quote: 'It always seems impossible until it’s done.',\n  },\n  // Orașe din România\n  Bucharest: {\n    author: 'Mihai Eminescu',\n    quote: 'Toate-s vechi și nouă toate.',\n  },\n  'Cluj-Napoca': {\n    author: 'Lucian Blaga',\n    quote: 'Eu nu strivesc corola de minuni a lumii.',\n  },\n  Timișoara: {\n    author: 'Ioan Slavici',\n    quote: 'Nu există prietenie mai frumoasă decât a unui om cu o carte.',\n  },\n  Iași: {\n    author: 'Mihail Sadoveanu',\n    quote: 'Adevărul este comoara cea mai de preț a omului.',\n  },\n  Constanța: {\n    author: 'Ovidiu',\n    quote:\n      'Găsesc în fiecare zi, fără excepție, o bucurie deosebită în studiu.',\n  },\n  Sibiu: {\n    author: 'Emil Cioran',\n    quote: 'Pe culmile disperării.',\n  },\n  Brașov: {\n    author: 'George Coșbuc',\n    quote: 'De la lume adunate și-napoi la lume date.',\n  },\n  Craiova: {\n    author: 'Marin Sorescu',\n    quote: 'Timpul este un tren care ne duce pe toți.',\n  },\n  Oradea: {\n    author: 'Ady Endre',\n    quote: 'Viața este un cântec nesfârșit.',\n  },\n  Arad: {\n    author: 'Ioan Slavici',\n    quote: 'Nu există prietenie mai frumoasă decât a unui om cu o carte.',\n  },\n  Ploiești: {\n    author: 'Nichita Stănescu',\n    quote: 'Ce bine că ești, ce mirare că sunt.',\n  },\n  Galați: {\n    author: 'Fănuș Neagu',\n    quote: 'În fiecare om sălășluiește o poveste.',\n  },\n  Pitești: {\n    author: 'Ion Minulescu',\n    quote: 'Într-o zi toate visele vor deveni amintiri.',\n  },\n  Suceava: {\n    author: 'Eugen Lovinescu',\n    quote: 'Literatura este arta de a exprima frumosul.',\n  },\n  Bacău: {\n    author: 'George Bacovia',\n    quote: 'Plouă, plouă, plouă...',\n  },\n  'Târgu Mureș': {\n    author: 'Liviu Rebreanu',\n    quote: 'Cărțile sunt prietenii cei mai liniștiți și constanți.',\n  },\n  'Baia Mare': {\n    author: 'Ion Creangă',\n    quote: 'Amintirile din copilărie sunt povestite cu sufletul unui om mare.',\n  },\n  Buzău: {\n    author: 'Vasile Voiculescu',\n    quote: 'Poezia este o stare de grație.',\n  },\n  'Satu Mare': {\n    author: 'Ady Endre',\n    quote: 'Viața este un cântec nesfârșit.',\n  },\n  Brăila: {\n    author: 'Panait Istrati',\n    quote: 'Omul este măsura tuturor lucrurilor.',\n  },\n  // Orașe cele mai căutate în lume\n  'Los Angeles': {\n    author: 'Ray Bradbury',\n    quote:\n      'You don’t have to burn books to destroy a culture. Just get people to stop reading them.',\n  },\n  'San Francisco': {\n    author: 'Jack London',\n    quote: 'The proper function of man is to live, not to exist.',\n  },\n  'Hong Kong': {\n    author: 'Eileen Chang',\n    quote: 'Every form of happiness is private.',\n  },\n  Singapore: {\n    author: 'Lee Kuan Yew',\n    quote:\n      'The first thing you must remember is that Singapore is an artificial creation.',\n  },\n  Dubai: {\n    author: 'Mohammed bin Rashid Al Maktoum',\n    quote: 'The race for excellence has no finish line.',\n  },\n  Bangkok: {\n    author: 'Pridi Banomyong',\n    quote: 'Peace is preferable to war.',\n  },\n  Toronto: {\n    author: 'Margaret Atwood',\n    quote: 'A word after a word after a word is power.',\n  },\n  Chicago: {\n    author: 'Ernest Hemingway',\n    quote:\n      'There is nothing to writing. All you do is sit down at a typewriter and bleed.',\n  },\n  Seoul: {\n    author: 'Han Kang',\n    quote: 'The more precious something is, the more you want to avoid it.',\n  },\n};\n\nexport async function getAuthorByCity(city) {\n  // Returnează autorul în funcție de oraș\n  return cityAuthorMapping[city] || null;\n}\n\nexport async function getQuoteByAuthor(authorData) {\n  if (authorData) {\n    return authorData.quote;\n  }\n  return `No quotes found for the specified city.`;\n}\n","import { getWeatherByCityName } from '../apiOpenWeather.js';\nimport { getAuthorByCity, getQuoteByAuthor } from '../quotesApi.js';\n\nexport async function fetchAdditionalWeatherData(city) {\n  try {\n    const weatherData = await getWeatherByCityName(city);\n    updateAdditionalWeatherCard(weatherData);\n\n    const authorData = await getAuthorByCity(city);\n    const quote = await getQuoteByAuthor(authorData);\n    updateQuote(quote, authorData.author);\n  } catch (error) {\n    console.error('Error fetching additional weather data:', error);\n  }\n}\n\nfunction updateAdditionalWeatherCard(weatherData) {\n  const weatherCard = document.getElementById('additional-weather-card');\n\n  if (weatherCard) {\n    // Actualizare timp și date\n    const currentDate = new Date();\n    weatherCard.querySelector('.current-date').textContent =\n      currentDate.toLocaleDateString();\n    weatherCard.querySelector('.current-time').textContent =\n      currentDate.toLocaleTimeString();\n\n    // Actualizare răsărit și apus\n    const sunriseTime = new Date(\n      weatherData.sys.sunrise * 1000\n    ).toLocaleTimeString();\n    const sunsetTime = new Date(\n      weatherData.sys.sunset * 1000\n    ).toLocaleTimeString();\n    weatherCard.querySelector(\n      '.sunrise-time'\n    ).textContent = `Sunrise: ${sunriseTime}`;\n    weatherCard.querySelector(\n      '.sunset-time'\n    ).textContent = `Sunset: ${sunsetTime}`;\n  } else {\n    console.error('Additional weather card element not found in the DOM');\n  }\n}\n\nfunction updateQuote(quote, author) {\n  const quoteCard = document.getElementById('quote-card');\n\n  if (quoteCard) {\n    quoteCard.querySelector('.quote-text').textContent = quote;\n    quoteCard.querySelector('.quote-author').textContent = `— ${author}`;\n  } else {\n    console.error('Quote card element not found in the DOM');\n  }\n}\n","import {\n  getWeatherByCoordinates,\n  getReverseGeocoding,\n  getWeatherByCityName,\n  getWeatherForecastByCityName\n} from '../apiOpenWeather.js';\nimport { setBackgroundForCity } from './backgroundImage.js';\nimport { fetchAdditionalWeatherData } from './additionalWeather.js';\n\nexport function displayWeatherDataOnCard(data) {\n  const cityNameElement = document.getElementById('city-name');\n  const temperatureElement = document.getElementById('temperature');\n  const descriptionElement = document.getElementById('description');\n  const humidityElement = document.getElementById('humidity');\n  const minTempElement = document.getElementById('min-temp');\n  const maxTempElement = document.getElementById('max-temp');\n  const weatherCardElement = document.getElementById('weather-card');\n  const forecastContainer = document.getElementById('forecast-container');\n  const chartContainer = document.getElementById('chart-container');\n\n  if (\n    cityNameElement &&\n    temperatureElement &&\n    descriptionElement &&\n    humidityElement &&\n    minTempElement &&\n    maxTempElement &&\n    weatherCardElement\n  ) {\n    cityNameElement.textContent = data.name;\n    temperatureElement.textContent = `${Math.round(data.main.temp)}`;\n    descriptionElement.innerHTML = `<img src=\"${getWeatherIconUrl(data.weather[0].icon)}\" alt=\"${data.weather[0].description}\" title=\"${data.weather[0].description}\">`;\n    humidityElement.textContent = `Humidity: ${data.main.humidity}%`;\n    minTempElement.textContent = `${Math.round(data.main.temp_min)} °C`;\n    maxTempElement.textContent = `${Math.round(data.main.temp_max)} °C`;\n\n    setBackgroundForCity(data.name);\n    \n    if (forecastContainer) {\n      forecastContainer.style.display = 'none';\n    }\n    if (chartContainer) {\n      chartContainer.style.display = 'none';\n    }\n  } else {\n    console.error('One or more elements not found in the DOM');\n  }\n  fetchAdditionalWeatherData(data.name);\n}\n\nexport function displayFiveDayForecast(data) {\n  const forecastContainer = document.getElementById('forecast-container');\n  const chartContainer = document.getElementById('chart-container');\n  const forecastLocationElement = document.getElementById('forecast-location');\n\n  forecastContainer.innerHTML = ''; \n\n  forecastLocationElement.textContent = data.city.name;\n\n  data.list.forEach((forecast, index) => {\n    if (index % 8 === 0) {\n      const forecastElement = document.createElement('div');\n      forecastElement.classList.add('forecast-day');\n\n      const date = new Date(forecast.dt * 1000);\n      const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });\n      const dateString = date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' });\n\n      forecastElement.innerHTML = `\n        <h3 class=\"date\">${dayName}</h3>\n        <p class=\"date\">${dateString}</p>\n        <img src=\"${getWeatherIconUrl(forecast.weather[0].icon)}\" alt=\"${forecast.weather[0].description}\">\n        <p class=\"temp temp-min\">${Math.round(forecast.main.temp_min)}°C</p>\n        <p class=\"temp temp-max\">${Math.round(forecast.main.temp_max)}°C</p>\n        <p class=\"more-info\">more info</p>\n      `;\n\n      forecastContainer.appendChild(forecastElement);\n    }\n  });\n\n  if (forecastContainer) {\n    forecastContainer.style.display = 'flex';\n    forecastContainer.style.justifyContent = 'space-around';\n  }\n  if (chartContainer) {\n    chartContainer.style.display = 'block';\n  }\n}\n\nfunction getWeatherIconUrl(iconCode) {\n  return `https://openweathermap.org/img/wn/${iconCode}.png`;\n}\n\nexport async function fetchAndDisplayWeatherForCity(city) {\n  try {\n    const data = await getWeatherByCityName(city);\n    displayWeatherDataOnCard(data);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n}\n\nexport async function fetchAndDisplayWeatherForLocation(lat, lon) {\n  try {\n    const data = await getWeatherByCoordinates(lat, lon);\n    const locationData = await getReverseGeocoding(lat, lon);\n    data.name = locationData[0].name;\n    displayWeatherDataOnCard(data);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n}\n\nexport function initializeWeatherCard() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        fetchAndDisplayWeatherForLocation(latitude, longitude);\n      },\n      error => {\n        console.error('Error getting location:', error);\n        fetchAndDisplayWeatherForCity('București');\n      }\n    );\n  } else {\n    console.error('Geolocation is not supported by this browser');\n    fetchAndDisplayWeatherForCity('București');\n  }\n\n  const todayButton = document.getElementById('today-weather');\n  const fiveDayButton = document.getElementById('five-day-forecast');\n  const showChartButton = document.getElementById('show-chart');\n  const chartContent = document.getElementById('chart-content');\n\n  if (todayButton) {\n    todayButton.addEventListener('click', () => {\n      const city = document.getElementById('city-name').textContent;\n      fetchAndDisplayWeatherForCity(city);\n      todayButton.focus();\n    });\n  }\n\n  if (fiveDayButton) {\n    fiveDayButton.addEventListener('click', async () => {\n      const city = document.getElementById('city-name').textContent;\n      try {\n        const data = await getWeatherForecastByCityName(city);\n        displayFiveDayForecast(data);\n        fiveDayButton.focus();\n      } catch (error) {\n        console.error('Error fetching 5-day forecast data:', error);\n      }\n    });\n  }\n\n  if (showChartButton) {\n    showChartButton.addEventListener('click', () => {\n      chartContent.innerHTML = '<p>Aici va fi afișat graficul cu vremea.</p>';\n      showChartButton.focus();\n    });\n  }\n}\n","import { fetchAndDisplayWeatherForCity } from './weathercard.js';\n\nfunction addToFavorites(city) {\n  let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n  if (!favorites.includes(city)) {\n    favorites.push(city);\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n    displayFavorites();\n    alert(`${city} has been added to your favorites.`);\n  } else {\n    alert(`${city} is already in your favorites.`);\n  }\n}\n\nfunction displayFavorites() {\n  const favoritesList = document.getElementById('favorites-list');\n  if (favoritesList) {\n    favoritesList.innerHTML = '';\n    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    favorites.forEach(city => {\n      const li = document.createElement('li');\n      li.textContent = city;\n      const removeBtn = document.createElement('span');\n      removeBtn.textContent = '×';\n      removeBtn.classList.add('remove-favorite');\n      removeBtn.addEventListener('click', () => {\n        removeFromFavorites(city);\n      });\n      li.appendChild(removeBtn);\n      favoritesList.appendChild(li);\n    });\n  }\n}\n\nfunction removeFromFavorites(city) {\n  let favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n  favorites = favorites.filter(favorite => favorite !== city);\n  localStorage.setItem('favorites', JSON.stringify(favorites));\n  displayFavorites();\n}\n\nexport function initializeSearch() {\n  const cityInput = document.getElementById('city-input');\n  const starIcon = document.getElementById('star-icon');\n\n  if (cityInput) {\n    console.log('City input element found.');\n    cityInput.addEventListener('keydown', function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        const city = cityInput.value.trim();\n        if (city) {\n          fetchAndDisplayWeatherForCity(city);\n        }\n      }\n    });\n  } else {\n    console.warn('City input element not found.');\n  }\n\n  if (starIcon) {\n    console.log('Star icon element found.');\n    starIcon.addEventListener('click', () => {\n      const city = cityInput.value.trim();\n      if (city) {\n        addToFavorites(city);\n      }\n    });\n  } else {\n    console.warn('Star icon element not found.');\n  }\n\n  displayFavorites(); // Display favorites when the page loads\n}\n","import { initializeSearch } from './partials/searchBar';\nimport { initializeWeatherCard } from './partials/weathercard.js';\nimport { fetchAdditionalWeatherData } from './partials/additionalWeather.js';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  initializeSearch(); // Inițializează bara de căutare\n  initializeWeatherCard(); // Inițializează cardul meteo și afișează datele pentru București\n  fetchAdditionalWeatherData();\n});\n"],"names":["$89f78dce0ada5702$var$BASE_URL","async","$89f78dce0ada5702$var$fetchFromAPI","url","response","fetch","ok","Error","status","json","error","console","$89f78dce0ada5702$export$4ab0f636f839e64a","city","$89f78dce0ada5702$export$1785bff21bc79cda","lat","lon","$89f78dce0ada5702$export$d6adc0d6f8e9062e","$89f78dce0ada5702$export$93446d9381978459","$45d73b5e94b45b0d$var$fetchFromAPI","$45d73b5e94b45b0d$export$c5318665bb77bd8e","query","page","perPage","log","$41a8f9a452131440$export$d5add58b7e9ca0f2","imageData","backgroundElement","document","getElementById","hits","length","style","backgroundImage","webformatURL","backgroundSize","backgroundPosition","height","width","position","zIndex","$8081f258976ffa1f$var$cityAuthorMapping","author","quote","Paris","London","Vienna","Rome","Tokyo","Dublin","Moscow","Berlin","Athens","Beijing","Madrid","Cairo","Lisbon","Istanbul","Sydney","Johannesburg","Bucharest","Sibiu","Craiova","Oradea","Arad","Suceava","Singapore","Dubai","Bangkok","Toronto","Chicago","Seoul","$8081f258976ffa1f$export$433fe3ba3daf33f2","$8081f258976ffa1f$export$1d0eb6b2776fb4ce","authorData","$7c3631e365eea965$export$483ddf6467553f8d","weatherData","weatherCard","currentDate","Date","querySelector","textContent","toLocaleDateString","toLocaleTimeString","sunriseTime","sys","sunrise","sunsetTime","sunset","$7c3631e365eea965$var$updateAdditionalWeatherCard","quoteCard","$7c3631e365eea965$var$updateQuote","$ccdfeceaf1384a39$export$9cf6ec62e739863b","data","cityNameElement","temperatureElement","descriptionElement","humidityElement","minTempElement","maxTempElement","weatherCardElement","forecastContainer","chartContainer","name","Math","round","main","temp","innerHTML","$ccdfeceaf1384a39$var$getWeatherIconUrl","weather","icon","description","humidity","temp_min","temp_max","display","iconCode","$ccdfeceaf1384a39$export$997a04a1291a9258","$ccdfeceaf1384a39$export$82c003f0446d7fe5","locationData","$ccdfeceaf1384a39$export$50d4602fb5eade15","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","todayButton","fiveDayButton","showChartButton","chartContent","addEventListener","focus","forecastLocationElement","list","forEach","forecast","index","forecastElement","createElement","classList","add","date","dt","dayName","weekday","dateString","day","month","appendChild","justifyContent","$ccdfeceaf1384a39$export$6b4e18cffb24b3c4","$44ced582dd439d5f$var$displayFavorites","favoritesList","JSON","parse","localStorage","getItem","li","removeBtn","favorites","filter","favorite","setItem","stringify","$44ced582dd439d5f$var$removeFromFavorites","$44ced582dd439d5f$export$27d2ef8106210bfe","cityInput","starIcon","event","key","preventDefault","value","trim","warn","includes","alert","push","$44ced582dd439d5f$var$addToFavorites"],"version":3,"file":"index.645a234a.js.map"}