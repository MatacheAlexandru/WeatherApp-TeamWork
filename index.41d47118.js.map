{"mappings":"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","sources":["src/apiOpenWeather.js","src/apiPixabay.js","src/partials/backgroundImage.js","src/partials/weathercard.js","src/index.js","src/partials/searchBar.js"],"sourcesContent":["const API_KEY = 'c28b86768a874c70b1ecd1343e8f0f24';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst GEO_BASE_URL = 'https://api.openweathermap.org/geo/1.0';\nconst MAP_BASE_URL = 'https://tile.openweathermap.org/map';\n\nasync function fetchFromAPI(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTPS error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Fetch API Error:', error);\n    throw error;\n  }\n}\n\n// Obține datele meteo actuale pentru un oraș specificat\nasync function getWeatherByCityName(city) {\n  try {\n    const url = `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error getting weather by city name \"${city}\":`, error);\n    throw error;\n  }\n}\n\n// Obține datele meteo actuale pentru coordonate geografice specificate\nasync function getWeatherByCoordinates(lat, lon) {\n  try {\n    const url = `${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather by coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\nasync function getWeatherForecastByCityName(city) {\n  try {\n    const url = `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather forecast by city name \"${city}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\nasync function getWeatherForecastByCoordinates(lat, lon) {\n  try {\n    const url = `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather forecast by coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține indicele UV pentru coordonate geografice specificate\nasync function getUVIndex(lat, lon) {\n  try {\n    const url = `${BASE_URL}/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting UV index for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține datele despre poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollution(lat, lon) {\n  try {\n    const url = `${BASE_URL}/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution data for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține coordonatele geografice pentru un oraș specificat\nasync function getGeocoding(city) {\n  try {\n    const url = `${GEO_BASE_URL}/direct?q=${city}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error getting geocoding for city \"${city}\":`, error);\n    throw error;\n  }\n}\n\n// Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\nasync function getReverseGeocoding(lat, lon) {\n  try {\n    const url = `${GEO_BASE_URL}/reverse?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting reverse geocoding for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\nasync function getWeatherMap(layer, zoom, x, y) {\n  try {\n    const url = `${MAP_BASE_URL}/${layer}/${zoom}/${x}/${y}.png?appid=${API_KEY}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTPS error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.error(\n      `Error getting weather map (layer: ${layer}, zoom: ${zoom}, x: ${x}, y: ${y}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollutionForecast(lat, lon) {\n  try {\n    const url = `${BASE_URL}/air_pollution/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution forecast for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\nasync function getAirPollutionHistory(lat, lon, start, end) {\n  try {\n    const url = `${BASE_URL}/air_pollution/history?lat=${lat}&lon=${lon}&start=${start}&end=${end}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution history for coordinates (lat: ${lat}, lon: ${lon}, start: ${start}, end: ${end}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține URL-ul iconiței meteo\nfunction getWeatherIconUrl(iconCode) {\n  return `https://openweathermap.org/img/wn/${iconCode}.png`;\n}\n\nexport {\n  getWeatherByCityName, // Obține datele meteo actuale pentru un oraș specificat\n  getWeatherByCoordinates, // Obține datele meteo actuale pentru coordonate geografice specificate\n  getWeatherForecastByCityName, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\n  getWeatherForecastByCoordinates, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\n  getUVIndex, // Obține indicele UV pentru coordonate geografice specificate\n  getAirPollution, // Obține datele despre poluarea aerului pentru coordonate geografice specificate\n  getGeocoding, // Obține coordonatele geografice pentru un oraș specificat\n  getReverseGeocoding, // Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\n  getWeatherMap, // Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\n  getAirPollutionForecast, // Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\n  getAirPollutionHistory, // Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\n  getWeatherIconUrl, // Obține URL-ul iconiței meteo\n};\n","const API_KEY = '24587351-f51ecbfdd1a1ed72c58205b43';\nconst BASE_URL = 'https://pixabay.com/api';\n\n// Funcție generală pentru cereri către Pixabay API\nasync function fetchFromAPI(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Network response was not ok. Status: ${response.status}`\n      );\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Fetch API Error:', error);\n    throw error;\n  }\n}\n\n// Obține imagini după un cuvânt cheie\nasync function searchImages(query, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&q=${query}&image_type=photo&page=${page}&per_page=${perPage}`;\n    console.log('Fetching images from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error searching images with query \"${query}\":`, error);\n    throw error;\n  }\n}\n\n// Obține videouri după un cuvânt cheie\nasync function searchVideos(query, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&q=${query}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching videos from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error searching videos with query \"${query}\":`, error);\n    throw error;\n  }\n}\n\n// Obține detalii despre o imagine după ID\nasync function getImageDetails(imageId) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&id=${imageId}`;\n    console.log('Fetching image details from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching image details with ID \"${imageId}\":`, error);\n    throw error;\n  }\n}\n\n// Obține imagini populare\nasync function getPopularImages(\n  category = '',\n  editorsChoice = false,\n  page = 1,\n  perPage = 20\n) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&order=popular&category=${category}&editors_choice=${editorsChoice}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching popular images from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error fetching popular images with category \"${category}\" and editorsChoice \"${editorsChoice}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține videouri populare\nasync function getPopularVideos(\n  category = '',\n  editorsChoice = false,\n  page = 1,\n  perPage = 20\n) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&order=popular&category=${category}&editors_choice=${editorsChoice}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching popular videos from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error fetching popular videos with category \"${category}\" and editorsChoice \"${editorsChoice}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține imagini aleatorii\nasync function getRandomImages(query, page = 1, perPage = 3) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&q=${query}&image_type=photo&per_page=${perPage}&page=${page}`;\n    console.log('Fetching image from URL:', url); // Log pentru verificarea URL-ului\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching random images with query \"${query}\":`, error);\n    throw error;\n  }\n}\n\n// Obține videouri aleatorii\nasync function getRandomVideos(category = '', page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&order=latest&category=${category}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching random videos from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error fetching random videos with category \"${category}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține imagini după culoare\nasync function getImagesByColor(color, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/?key=${API_KEY}&colors=${color}&image_type=photo&page=${page}&per_page=${perPage}`;\n    console.log('Fetching images by color from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching images by color \"${color}\":`, error);\n    throw error;\n  }\n}\n\n// Obține videouri după culoare (dacă este suportat)\nasync function getVideosByColor(color, page = 1, perPage = 20) {\n  try {\n    const url = `${BASE_URL}/videos/?key=${API_KEY}&colors=${color}&page=${page}&per_page=${perPage}`;\n    console.log('Fetching videos by color from URL:', url);\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error fetching videos by color \"${color}\":`, error);\n    throw error;\n  }\n}\n\nexport {\n  searchImages, // Obține imagini după un cuvânt cheie\n  searchVideos, // Obține videouri după un cuvânt cheie\n  getImageDetails, // Obține detalii despre o imagine după ID\n  getPopularImages, // Obține imagini populare\n  getPopularVideos, // Obține videouri populare\n  getRandomImages, // Obține imagini aleatorii\n  getRandomVideos, // Obține videouri aleatorii\n  getImagesByColor, // Obține imagini după culoare\n  getVideosByColor, // Obține videouri după culoare (dacă este suportat)\n};\n","import { getRandomImages } from '../apiPixabay.js';\n\nexport async function setBackgroundForCity(city) {\n  try {\n    const imageData = await getRandomImages(city, 1, 3); // Cerem trei imagini pentru a evita erorile de validare\n    const backgroundElement = document.getElementById('background-image');\n    if (\n      imageData &&\n      imageData.hits &&\n      imageData.hits.length > 0 &&\n      backgroundElement\n    ) {\n      backgroundElement.style.backgroundImage = `url(${imageData.hits[0].webformatURL})`;\n      backgroundElement.style.backgroundSize = 'cover';\n      backgroundElement.style.backgroundPosition = 'center';\n      backgroundElement.style.height = '100vh';\n      backgroundElement.style.width = '100vw';\n      backgroundElement.style.position = 'fixed';\n      backgroundElement.style.zIndex = '-1';\n    } else {\n      console.error('No images found or background element not found.');\n    }\n  } catch (error) {\n    console.error('Error fetching image from Pixabay API:', error);\n  }\n}\n","import {\n  getWeatherByCoordinates,\n  getReverseGeocoding,\n  getWeatherByCityName,\n} from '../apiOpenWeather.js';\nimport { setBackgroundForCity } from './backgroundImage.js';\n\nexport function displayWeatherDataOnCard(data) {\n  const cityNameElement = document.getElementById('city-name');\n  const temperatureElement = document.getElementById('temperature');\n  const descriptionElement = document.getElementById('description');\n  const humidityElement = document.getElementById('humidity');\n  const weatherCardElement = document.getElementById('weather-card');\n\n  if (\n    cityNameElement &&\n    temperatureElement &&\n    descriptionElement &&\n    humidityElement &&\n    weatherCardElement\n  ) {\n    cityNameElement.textContent = data.name;\n    temperatureElement.textContent = `Temperature: ${data.main.temp} °C`;\n    descriptionElement.textContent = `Description: ${data.weather[0].description}`;\n    humidityElement.textContent = `Humidity: ${data.main.humidity}%`;\n\n    setBackgroundForCity(data.name);\n  } else {\n    console.error('One or more elements not found in the DOM');\n  }\n}\n\nexport async function fetchAndDisplayWeatherForCity(city) {\n  try {\n    const data = await getWeatherByCityName(city);\n    displayWeatherDataOnCard(data);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n}\n\nexport async function fetchAndDisplayWeatherForLocation(lat, lon) {\n  try {\n    const data = await getWeatherByCoordinates(lat, lon);\n    const locationData = await getReverseGeocoding(lat, lon);\n    data.name = locationData[0].name;\n    displayWeatherDataOnCard(data);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n  }\n}\n\nexport function initializeWeatherCard() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        fetchAndDisplayWeatherForLocation(latitude, longitude);\n      },\n      error => {\n        console.error('Error getting location:', error);\n        fetchAndDisplayWeatherForCity('București');\n      }\n    );\n  } else {\n    console.error('Geolocation is not supported by this browser');\n    fetchAndDisplayWeatherForCity('București');\n  }\n}\n","import { initializeSearch } from './partials/searchBar';\nimport { initializeWeatherCard } from './partials/weathercard.js';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  initializeSearch(); // Inițializează bara de căutare\n  initializeWeatherCard(); // Inițializează cardul meteo și afișează datele pentru București\n});\n","import { fetchAndDisplayWeatherForCity } from './weathercard.js';\n\nexport function initializeSearch() {\n  document\n    .getElementById('search-form')\n    .addEventListener('submit', function (event) {\n      event.preventDefault();\n      const city = document.getElementById('city-input').value.trim();\n      if (city) {\n        fetchAndDisplayWeatherForCity(city);\n      }\n    });\n}\n"],"names":["$89f78dce0ada5702$var$BASE_URL","async","$89f78dce0ada5702$var$fetchFromAPI","url","response","fetch","ok","Error","status","json","error","console","$89f78dce0ada5702$export$4ab0f636f839e64a","city","$89f78dce0ada5702$export$1785bff21bc79cda","lat","lon","$89f78dce0ada5702$export$93446d9381978459","$45d73b5e94b45b0d$var$fetchFromAPI","$45d73b5e94b45b0d$export$c5318665bb77bd8e","query","page","perPage","log","$41a8f9a452131440$export$d5add58b7e9ca0f2","imageData","backgroundElement","document","getElementById","hits","length","style","backgroundImage","webformatURL","backgroundSize","backgroundPosition","height","width","position","zIndex","$ccdfeceaf1384a39$export$9cf6ec62e739863b","data","cityNameElement","temperatureElement","descriptionElement","humidityElement","weatherCardElement","textContent","name","main","temp","weather","description","humidity","$ccdfeceaf1384a39$export$997a04a1291a9258","$ccdfeceaf1384a39$export$82c003f0446d7fe5","locationData","addEventListener","event","preventDefault","value","trim","navigator","geolocation","getCurrentPosition","latitude","longitude","coords"],"version":3,"file":"index.41d47118.js.map"}