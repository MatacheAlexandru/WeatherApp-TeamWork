{"mappings":"AAAA,MACMA,EAAW,0CAIjBC,eAAeC,EAAaC,GAC1B,IACE,MAAMC,QAAiBC,MAAMF,GAC7B,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAGlD,aADmBJ,EAASK,M,CAE5B,MAAOC,GAEP,MADAC,QAAQD,MAAM,mBAAoBA,GAC5BA,C,EAKRT,eAAaW,EAAqBC,GAClC,IACE,MAAMV,EAAM,GAAGH,eAAsBa,wDACrC,aAAaX,EAAaC,E,CAC1B,MAAOO,GAEP,MADAC,QAAQD,MAAM,uCAAuCG,MAAUH,GACzDA,C,EC1BV,SAASI,EAAsBC,GAC7B,MAAMC,EAAuBC,SAASC,eACpC,0BAEEF,IACFA,EAAqBG,UAAY,uJAIEJ,EAAYK,qEACML,EAAYM,QAAQ,GAAGC,+IAG/CP,EAAYQ,KAAKC,2GAGdT,EAAYQ,KAAKE,uGAEjBV,EAAYQ,KAAKG,yE,CCfrDT,SAASU,iBAAiB,oBAAoB1B,UAC5C,MAAM2B,EAAcX,SAASC,eAAe,gBACtCW,EAAeZ,SAASC,eAAe,iBAEzCU,GAAeC,EACjBA,EAAaF,iBAAiB,SAAS1B,UACrC,MAAMY,EAAOe,EAAYE,MAAMC,OAC/B,GAAIlB,EACF,IAEEC,QAD0BF,EAAqBC,G,CAE/C,MAAOH,GACPC,QAAQD,MAAM,+BAAgCA,E,KAKpDC,QAAQD,MAAM,oCAAoC","sources":["src/apiOpenWAther.js","src/partials/weathercard.js","src/index.js"],"sourcesContent":["const API_KEY = 'c28b86768a874c70b1ecd1343e8f0f24';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst GEO_BASE_URL = 'http://api.openweathermap.org/geo/1.0';\nconst MAP_BASE_URL = 'https://tile.openweathermap.org/map';\n\nasync function fetchFromAPI(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Fetch API Error:', error);\n    throw error;\n  }\n}\n\n// Obține datele meteo actuale pentru un oraș specificat\nasync function getWeatherByCityName(city) {\n  try {\n    const url = `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error getting weather by city name \"${city}\":`, error);\n    throw error;\n  }\n}\n\n// Obține datele meteo actuale pentru coordonate geografice specificate\nasync function getWeatherByCoordinates(lat, lon) {\n  try {\n    const url = `${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather by coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\nasync function getWeatherForecastByCityName(city) {\n  try {\n    const url = `${BASE_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather forecast by city name \"${city}\":`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\nasync function getWeatherForecastByCoordinates(lat, lon) {\n  try {\n    const url = `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting weather forecast by coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține indicele UV pentru coordonate geografice specificate\nasync function getUVIndex(lat, lon) {\n  try {\n    const url = `${BASE_URL}/uvi?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting UV index for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține datele despre poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollution(lat, lon) {\n  try {\n    const url = `${BASE_URL}/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution data for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține coordonatele geografice pentru un oraș specificat\nasync function getGeocoding(city) {\n  try {\n    const url = `${GEO_BASE_URL}/direct?q=${city}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(`Error getting geocoding for city \"${city}\":`, error);\n    throw error;\n  }\n}\n\n// Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\nasync function getReverseGeocoding(lat, lon) {\n  try {\n    const url = `${GEO_BASE_URL}/reverse?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting reverse geocoding for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\nasync function getWeatherMap(layer, zoom, x, y) {\n  try {\n    const url = `${MAP_BASE_URL}/${layer}/${zoom}/${x}/${y}.png?appid=${API_KEY}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.error(\n      `Error getting weather map (layer: ${layer}, zoom: ${zoom}, x: ${x}, y: ${y}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\nasync function getAirPollutionForecast(lat, lon) {\n  try {\n    const url = `${BASE_URL}/air_pollution/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution forecast for coordinates (lat: ${lat}, lon: ${lon}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\nasync function getAirPollutionHistory(lat, lon, start, end) {\n  try {\n    const url = `${BASE_URL}/air_pollution/history?lat=${lat}&lon=${lon}&start=${start}&end=${end}&appid=${API_KEY}`;\n    return await fetchFromAPI(url);\n  } catch (error) {\n    console.error(\n      `Error getting air pollution history for coordinates (lat: ${lat}, lon: ${lon}, start: ${start}, end: ${end}):`,\n      error\n    );\n    throw error;\n  }\n}\n\n// Obține URL-ul iconiței meteo\nfunction getWeatherIconUrl(iconCode) {\n  return `http://openweathermap.org/img/wn/${iconCode}.png`;\n}\n\nexport {\n  getWeatherByCityName, // Obține datele meteo actuale pentru un oraș specificat\n  getWeatherByCoordinates, // Obține datele meteo actuale pentru coordonate geografice specificate\n  getWeatherForecastByCityName, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru un oraș specificat\n  getWeatherForecastByCoordinates, // Obține prognoza meteo pe 5 zile la intervale de 3 ore pentru coordonate geografice specificate\n  getUVIndex, // Obține indicele UV pentru coordonate geografice specificate\n  getAirPollution, // Obține datele despre poluarea aerului pentru coordonate geografice specificate\n  getGeocoding, // Obține coordonatele geografice pentru un oraș specificat\n  getReverseGeocoding, // Obține numele locației pentru coordonate geografice specificate (geocodare inversă)\n  getWeatherMap, // Obține hărți meteo pentru straturi specifice (precipitații, nori, temperatură etc.)\n  getAirPollutionForecast, // Obține prognoza pentru poluarea aerului pentru coordonate geografice specificate\n  getAirPollutionHistory, // Obține istoricul poluării aerului pentru coordonate geografice specificate între datele de start și end (în format UNIX timestamp)\n  getWeatherIconUrl, // Obține URL-ul iconiței meteo\n};\n","function initializeWeatherCard(weatherData) {\n  const weatherDataContainer = document.getElementById(\n    'weather-data-container'\n  );\n  if (weatherDataContainer) {\n    weatherDataContainer.innerHTML = `\n      <div class=\"weather-today-card\">\n        <div class=\"city-card\">\n          <div class=\"today-icon\">\n            <h3 class=\"current-city\">${weatherData.name}</h3>\n            <img src=\"http://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png\" alt=\"Weather Icon\" class=\"weather-icon\">\n          </div>\n          <div class=\"today-degrees\">\n            <span class=\"temp\">${weatherData.main.temp}°C</span>\n          </div>\n          <div class=\"minmax-temp\">\n            <div class=\"min\">Min: ${weatherData.main.temp_min}°C</div>\n            <span class=\"divide-line\">|</span>\n            <div class=\"max\">Max: ${weatherData.main.temp_max}°C</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport { initializeWeatherCard };\n","import { getWeatherByCityName } from './apiOpenWAther.js';\nimport { initializeWeatherCard } from './partials/weathercard.js';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const searchInput = document.getElementById('search-input');\n  const searchButton = document.getElementById('search-button');\n\n  if (searchInput && searchButton) {\n    searchButton.addEventListener('click', async () => {\n      const city = searchInput.value.trim();\n      if (city) {\n        try {\n          const weatherData = await getWeatherByCityName(city);\n          initializeWeatherCard(weatherData);\n        } catch (error) {\n          console.error('Error fetching weather data:', error);\n        }\n      }\n    });\n  } else {\n    console.error('Search input or button not found.');\n  }\n});\n"],"names":["$f51b1575c5942e9e$var$BASE_URL","async","$f51b1575c5942e9e$var$fetchFromAPI","url","response","fetch","ok","Error","status","json","error","console","$f51b1575c5942e9e$export$4ab0f636f839e64a","city","$ccdfeceaf1384a39$export$50d4602fb5eade15","weatherData","weatherDataContainer","document","getElementById","innerHTML","name","weather","icon","main","temp","temp_min","temp_max","addEventListener","searchInput","searchButton","value","trim"],"version":3,"file":"index.e70e2ace.js.map"}